// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"gorm.io/gorm"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	answerFieldNames          = builder.RawFieldNames(&Answer{})
	answerRows                = strings.Join(answerFieldNames, ",")
	answerRowsExpectAutoSet   = strings.Join(stringx.Remove(answerFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	answerRowsWithPlaceHolder = strings.Join(stringx.Remove(answerFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAnswerIdPrefix = "cache:answer:id:"
)

type (
	answerModel interface {
		Insert(ctx context.Context, data *Answer) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Answer, error)
		Update(ctx context.Context, data *Answer) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAnswerModel struct {
		sqlc.CachedConn
		table string
	}

	Answer struct {
		Id         int64          `db:"id"`
		UserId     int64          `db:"user_id"`
		QuestionId int64          `db:"question_id"`
		ParentId   int64          `db:"parent_id"`
		Content    string         `db:"content"`
		IsAnswer   int64          `db:"is_answer"`
		CreateTime time.Time      `db:"create_time"`              // 创建时间
		UpdateTime time.Time      `db:"update_time"`              // 更新时间
		DeleteTime gorm.DeletedAt `gorm:"index" db:"delete_time"` // 删除时间
	}
)

func newAnswerModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAnswerModel {
	return &defaultAnswerModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`answer`",
	}
}

func (m *defaultAnswerModel) Delete(ctx context.Context, id int64) error {
	answerIdKey := fmt.Sprintf("%s%v", cacheAnswerIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, answerIdKey)
	return err
}

func (m *defaultAnswerModel) FindOne(ctx context.Context, id int64) (*Answer, error) {
	answerIdKey := fmt.Sprintf("%s%v", cacheAnswerIdPrefix, id)
	var resp Answer
	err := m.QueryRowCtx(ctx, &resp, answerIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", answerRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAnswerModel) Insert(ctx context.Context, data *Answer) (sql.Result, error) {
	answerIdKey := fmt.Sprintf("%s%v", cacheAnswerIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, answerRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.QuestionId, data.ParentId, data.Content, data.IsAnswer, data.DeleteTime)
	}, answerIdKey)
	return ret, err
}

func (m *defaultAnswerModel) Update(ctx context.Context, data *Answer) error {
	answerIdKey := fmt.Sprintf("%s%v", cacheAnswerIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, answerRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.QuestionId, data.ParentId, data.Content, data.IsAnswer, data.DeleteTime, data.Id)
	}, answerIdKey)
	return err
}

func (m *defaultAnswerModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAnswerIdPrefix, primary)
}

func (m *defaultAnswerModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", answerRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAnswerModel) tableName() string {
	return m.table
}
