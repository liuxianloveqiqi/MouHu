// Code generated by goctl. DO NOT EDIT.
// Source: qa.proto

package qaclient

import (
	"context"

	"MouHu/service/app/qa/rpc/types/qa"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AltAnswerOrCommitReq = qa.AltAnswerOrCommitReq
	AltQuestionReq       = qa.AltQuestionReq
	AnsQuestionReq       = qa.AnsQuestionReq
	AnswerList           = qa.AnswerList
	ComAnswerReq         = qa.ComAnswerReq
	CommonResp           = qa.CommonResp
	DelAnswerOrCommitReq = qa.DelAnswerOrCommitReq
	DelQuestionReq       = qa.DelQuestionReq
	GetAnswerReq         = qa.GetAnswerReq
	GetAnswerResp        = qa.GetAnswerResp
	GetCommitReq         = qa.GetCommitReq
	GetCommitResp        = qa.GetCommitResp
	GetQuestionReq       = qa.GetQuestionReq
	GetQuestionResp      = qa.GetQuestionResp
	PubQuestionReq       = qa.PubQuestionReq
	QuestionList         = qa.QuestionList

	Qa interface {
		PubQuestion(ctx context.Context, in *PubQuestionReq, opts ...grpc.CallOption) (*CommonResp, error)
		AnsQuestion(ctx context.Context, in *AnsQuestionReq, opts ...grpc.CallOption) (*CommonResp, error)
		ComAnswer(ctx context.Context, in *ComAnswerReq, opts ...grpc.CallOption) (*CommonResp, error)
		GetQuestion(ctx context.Context, in *GetAnswerReq, opts ...grpc.CallOption) (*QuestionList, error)
		GetAnswer(ctx context.Context, in *GetAnswerReq, opts ...grpc.CallOption) (*GetAnswerResp, error)
		GetCommit(ctx context.Context, in *GetCommitReq, opts ...grpc.CallOption) (*GetCommitResp, error)
		DelQuestion(ctx context.Context, in *DelQuestionReq, opts ...grpc.CallOption) (*CommonResp, error)
		DelAnswerOrCommit(ctx context.Context, in *DelAnswerOrCommitReq, opts ...grpc.CallOption) (*CommonResp, error)
		AltQuestion(ctx context.Context, in *AltQuestionReq, opts ...grpc.CallOption) (*CommonResp, error)
		AltAnswerOrCommit(ctx context.Context, in *AltAnswerOrCommitReq, opts ...grpc.CallOption) (*CommonResp, error)
	}

	defaultQa struct {
		cli zrpc.Client
	}
)

func NewQa(cli zrpc.Client) Qa {
	return &defaultQa{
		cli: cli,
	}
}

func (m *defaultQa) PubQuestion(ctx context.Context, in *PubQuestionReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := qa.NewQaClient(m.cli.Conn())
	return client.PubQuestion(ctx, in, opts...)
}

func (m *defaultQa) AnsQuestion(ctx context.Context, in *AnsQuestionReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := qa.NewQaClient(m.cli.Conn())
	return client.AnsQuestion(ctx, in, opts...)
}

func (m *defaultQa) ComAnswer(ctx context.Context, in *ComAnswerReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := qa.NewQaClient(m.cli.Conn())
	return client.ComAnswer(ctx, in, opts...)
}

func (m *defaultQa) GetQuestion(ctx context.Context, in *GetAnswerReq, opts ...grpc.CallOption) (*QuestionList, error) {
	client := qa.NewQaClient(m.cli.Conn())
	return client.GetQuestion(ctx, in, opts...)
}

func (m *defaultQa) GetAnswer(ctx context.Context, in *GetAnswerReq, opts ...grpc.CallOption) (*GetAnswerResp, error) {
	client := qa.NewQaClient(m.cli.Conn())
	return client.GetAnswer(ctx, in, opts...)
}

func (m *defaultQa) GetCommit(ctx context.Context, in *GetCommitReq, opts ...grpc.CallOption) (*GetCommitResp, error) {
	client := qa.NewQaClient(m.cli.Conn())
	return client.GetCommit(ctx, in, opts...)
}

func (m *defaultQa) DelQuestion(ctx context.Context, in *DelQuestionReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := qa.NewQaClient(m.cli.Conn())
	return client.DelQuestion(ctx, in, opts...)
}

func (m *defaultQa) DelAnswerOrCommit(ctx context.Context, in *DelAnswerOrCommitReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := qa.NewQaClient(m.cli.Conn())
	return client.DelAnswerOrCommit(ctx, in, opts...)
}

func (m *defaultQa) AltQuestion(ctx context.Context, in *AltQuestionReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := qa.NewQaClient(m.cli.Conn())
	return client.AltQuestion(ctx, in, opts...)
}

func (m *defaultQa) AltAnswerOrCommit(ctx context.Context, in *AltAnswerOrCommitReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := qa.NewQaClient(m.cli.Conn())
	return client.AltAnswerOrCommit(ctx, in, opts...)
}
